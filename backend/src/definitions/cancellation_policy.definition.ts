import { ApiTags, createRoute } from "../lib/route-wrapper";
import {
  CancellationPoliciesListResponseSchema,
  CancellationPolicyPathParamsSchema,
  CancellationPolicyQueryParamsSchema,
  CancellationPolicyResponseSchema,
  CreateCancellationPolicyRequestSchema,
  UpdateCancellationPolicyRequestSchema,
} from "../schemas";

export const CancellationPolicyRouteDefinitions = {
  getPolicies: createRoute({
    method: "get",
    path: "/cancellation-policies",
    summary: "Get cancellation policies",
    description:
      "Retrieve a list of cancellation policies with optional filters and pagination",
    tags: [ApiTags.HOTELS],
    successSchema: CancellationPoliciesListResponseSchema,
    successDescription: "Cancellation policies retrieved successfully",
    querySchema: CancellationPolicyQueryParamsSchema,
    includeBadRequest: true,
  }),
  getPolicyById: createRoute({
    method: "get",
    path: "/cancellation-policies/{id}",
    summary: "Get cancellation policy by ID",
    description: "Retrieve a specific cancellation policy by ID",
    tags: [ApiTags.HOTELS],
    successSchema: CancellationPolicyResponseSchema,
    successDescription: "Cancellation policy retrieved successfully",
    paramsSchema: CancellationPolicyPathParamsSchema,
    includeNotFound: true,
  }),
  createPolicy: createRoute({
    method: "post",
    path: "/cancellation-policies",
    summary: "Create cancellation policy",
    description: "Create a new cancellation policy",
    tags: [ApiTags.HOTELS],
    successSchema: CancellationPolicyResponseSchema,
    successDescription: "Cancellation policy created successfully",
    requestSchema: CreateCancellationPolicyRequestSchema,
    includeBadRequest: true,
  }),
  updatePolicy: createRoute({
    method: "put",
    path: "/cancellation-policies/{id}",
    summary: "Update cancellation policy",
    description: "Update an existing cancellation policy",
    tags: [ApiTags.HOTELS],
    successSchema: CancellationPolicyResponseSchema,
    successDescription: "Cancellation policy updated successfully",
    paramsSchema: CancellationPolicyPathParamsSchema,
    requestSchema: UpdateCancellationPolicyRequestSchema,
    includeBadRequest: true,
    includeNotFound: true,
  }),
  deletePolicy: createRoute({
    method: "delete",
    path: "/cancellation-policies/{id}",
    summary: "Delete cancellation policy",
    description: "Delete a cancellation policy",
    tags: [ApiTags.HOTELS],
    successSchema: CancellationPolicyResponseSchema,
    successDescription: "Cancellation policy deleted successfully",
    paramsSchema: CancellationPolicyPathParamsSchema,
    includeNotFound: true,
  }),
};
