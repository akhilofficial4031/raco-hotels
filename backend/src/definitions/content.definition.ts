import { ApiTags, createAuthenticatedRoute } from "../lib/openapi";
import {
  ContentBlocksListResponseSchema,
  ContentBlockPathParamsSchema,
  ContentBlockQueryParamsSchema,
  ContentBlockResponseSchema,
  CreateContentBlockRequestSchema,
  UpdateContentBlockRequestSchema,
} from "../schemas";

export const ContentRouteDefinitions = {
  getContentBlocks: createAuthenticatedRoute({
    method: "get",
    path: "/content-blocks",
    summary: "Get content blocks",
    description: "Retrieve content blocks with optional filters",
    tags: [ApiTags.CONTENT],
    successSchema: ContentBlocksListResponseSchema,
    successDescription: "Content blocks retrieved successfully",
    querySchema: ContentBlockQueryParamsSchema,
    includeBadRequest: true,
  }),
  getContentBlockById: createAuthenticatedRoute({
    method: "get",
    path: "/content-blocks/{id}",
    summary: "Get content block",
    description: "Retrieve content block by ID",
    tags: [ApiTags.CONTENT],
    successSchema: ContentBlockResponseSchema,
    successDescription: "Content block retrieved successfully",
    paramsSchema: ContentBlockPathParamsSchema,
    includeNotFound: true,
  }),
  createContentBlock: createAuthenticatedRoute({
    method: "post",
    path: "/content-blocks",
    summary: "Create content block",
    description: "Create a new CMS content block",
    tags: [ApiTags.CONTENT],
    successSchema: ContentBlockResponseSchema,
    successDescription: "Content block created successfully",
    requestSchema: CreateContentBlockRequestSchema,
    includeBadRequest: true,
  }),
  updateContentBlock: createAuthenticatedRoute({
    method: "put",
    path: "/content-blocks/{id}",
    summary: "Update content block",
    description: "Update an existing CMS content block",
    tags: [ApiTags.CONTENT],
    successSchema: ContentBlockResponseSchema,
    successDescription: "Content block updated successfully",
    paramsSchema: ContentBlockPathParamsSchema,
    requestSchema: UpdateContentBlockRequestSchema,
    includeBadRequest: true,
    includeNotFound: true,
  }),
  deleteContentBlock: createAuthenticatedRoute({
    method: "delete",
    path: "/content-blocks/{id}",
    summary: "Delete content block",
    description: "Delete a CMS content block",
    tags: [ApiTags.CONTENT],
    successSchema: ContentBlockResponseSchema,
    successDescription: "Content block deleted successfully",
    paramsSchema: ContentBlockPathParamsSchema,
    includeNotFound: true,
  }),
};
