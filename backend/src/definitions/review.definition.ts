import { ApiTags, createAuthenticatedRoute } from "../lib/openapi";
import {
  ReviewsListResponseSchema,
  ReviewPathParamsSchema,
  ReviewQueryParamsSchema,
  ReviewResponseSchema,
  CreateReviewRequestSchema,
  UpdateReviewRequestSchema,
} from "../schemas";

export const ReviewRouteDefinitions = {
  getReviews: createAuthenticatedRoute({
    method: "get",
    path: "/reviews",
    summary: "Get all reviews",
    description: "Retrieve a list of reviews with filters and pagination",
    tags: [ApiTags.REVIEWS],
    successSchema: ReviewsListResponseSchema,
    successDescription: "Reviews retrieved successfully",
    querySchema: ReviewQueryParamsSchema,
    includeBadRequest: true,
  }),
  getReviewById: createAuthenticatedRoute({
    method: "get",
    path: "/reviews/{id}",
    summary: "Get review by ID",
    description: "Retrieve a review by ID",
    tags: [ApiTags.REVIEWS],
    successSchema: ReviewResponseSchema,
    successDescription: "Review retrieved successfully",
    paramsSchema: ReviewPathParamsSchema,
    includeNotFound: true,
  }),
  createReview: createAuthenticatedRoute({
    method: "post",
    path: "/reviews",
    summary: "Create review",
    description: "Create a new review for a hotel",
    tags: [ApiTags.REVIEWS],
    successSchema: ReviewResponseSchema,
    successDescription: "Review created successfully",
    requestSchema: CreateReviewRequestSchema,
    includeBadRequest: true,
  }),
  updateReview: createAuthenticatedRoute({
    method: "put",
    path: "/reviews/{id}",
    summary: "Update review",
    description: "Update an existing review",
    tags: [ApiTags.REVIEWS],
    successSchema: ReviewResponseSchema,
    successDescription: "Review updated successfully",
    paramsSchema: ReviewPathParamsSchema,
    requestSchema: UpdateReviewRequestSchema,
    includeBadRequest: true,
    includeNotFound: true,
  }),
  deleteReview: createAuthenticatedRoute({
    method: "delete",
    path: "/reviews/{id}",
    summary: "Delete review",
    description: "Delete a review",
    tags: [ApiTags.REVIEWS],
    successSchema: ReviewResponseSchema,
    successDescription: "Review deleted successfully",
    paramsSchema: ReviewPathParamsSchema,
    includeNotFound: true,
  }),
};
