import { ApiTags, createRoute } from "../lib/route-wrapper";
import {
  RoomsListResponseSchema,
  RoomPathParamsSchema,
  RoomQueryParamsSchema,
  RoomResponseSchema,
  RoomsResponseSchema,
  CreateRoomsRequestSchema,
  UpdateRoomRequestSchema,
} from "../schemas";

export const RoomRouteDefinitions = {
  getRooms: createRoute({
    method: "get",
    path: "/rooms",
    summary: "Get all rooms",
    description: "Retrieve a list of rooms with filters and pagination",
    tags: [ApiTags.ROOMS],
    successSchema: RoomsListResponseSchema,
    successDescription: "Rooms retrieved successfully",
    querySchema: RoomQueryParamsSchema,
    includeBadRequest: true,
  }),
  getRoomById: createRoute({
    method: "get",
    path: "/rooms/{id}",
    summary: "Get room by ID",
    description: "Retrieve a room by ID",
    tags: [ApiTags.ROOMS],
    successSchema: RoomResponseSchema,
    successDescription: "Room retrieved successfully",
    paramsSchema: RoomPathParamsSchema,
    includeNotFound: true,
  }),
  createRoom: createRoute({
    method: "post",
    path: "/rooms",
    summary: "Create room",
    description: "Create a new physical room connected to a room type",
    tags: [ApiTags.ROOMS],
    successSchema: RoomsResponseSchema,
    successDescription: "Room created successfully",
    requestSchema: CreateRoomsRequestSchema,
    includeBadRequest: true,
  }),
  updateRoom: createRoute({
    method: "put",
    path: "/rooms/{id}",
    summary: "Update room",
    description: "Update an existing physical room",
    tags: [ApiTags.ROOMS],
    successSchema: RoomResponseSchema,
    successDescription: "Room updated successfully",
    paramsSchema: RoomPathParamsSchema,
    requestSchema: UpdateRoomRequestSchema,
    includeBadRequest: true,
    includeNotFound: true,
  }),
  deleteRoom: createRoute({
    method: "delete",
    path: "/rooms/{id}",
    summary: "Delete room",
    description: "Delete a physical room",
    tags: [ApiTags.ROOMS],
    successSchema: RoomResponseSchema,
    successDescription: "Room deleted successfully",
    paramsSchema: RoomPathParamsSchema,
    includeNotFound: true,
  }),
};
