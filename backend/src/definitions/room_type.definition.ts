import { ApiTags, createRoute } from "../lib/route-wrapper";
import {
  RoomTypesListResponseSchema,
  RoomTypePathParamsSchema,
  RoomTypeQueryParamsSchema,
  RoomTypeResponseSchema,
  CreateRoomTypeRequestSchema,
  UpdateRoomTypeRequestSchema,
} from "../schemas";

export const RoomTypeRouteDefinitions = {
  getRoomTypes: createRoute({
    method: "get",
    path: "/room-types",
    summary: "Get all room types",
    description: "Retrieve a list of room types with filters and pagination",
    tags: [ApiTags.ROOMS],
    successSchema: RoomTypesListResponseSchema,
    successDescription: "Room types retrieved successfully",
    querySchema: RoomTypeQueryParamsSchema,
    includeBadRequest: true,
  }),
  getRoomTypeById: createRoute({
    method: "get",
    path: "/room-types/{id}",
    summary: "Get room type by ID",
    description: "Retrieve a specific room type by ID",
    tags: [ApiTags.ROOMS],
    successSchema: RoomTypeResponseSchema,
    successDescription: "Room type retrieved successfully",
    paramsSchema: RoomTypePathParamsSchema,
    includeNotFound: true,
  }),
  createRoomType: createRoute({
    method: "post",
    path: "/room-types",
    summary: "Create room type",
    description: "Create a new room type, with optional amenities and images",
    tags: [ApiTags.ROOMS],
    successSchema: RoomTypeResponseSchema,
    successDescription: "Room type created successfully",
    requestSchema: CreateRoomTypeRequestSchema,
    includeBadRequest: true,
    includeConflict: true,
  }),
  updateRoomType: createRoute({
    method: "put",
    path: "/room-types/{id}",
    summary: "Update room type",
    description:
      "Update a room type; if amenityIds/images arrays are provided they replace existing",
    tags: [ApiTags.ROOMS],
    successSchema: RoomTypeResponseSchema,
    successDescription: "Room type updated successfully",
    paramsSchema: RoomTypePathParamsSchema,
    requestSchema: UpdateRoomTypeRequestSchema,
    includeBadRequest: true,
    includeNotFound: true,
    includeConflict: true,
  }),
  deleteRoomType: createRoute({
    method: "delete",
    path: "/room-types/{id}",
    summary: "Delete room type",
    description: "Delete a room type",
    tags: [ApiTags.ROOMS],
    successSchema: RoomTypeResponseSchema,
    successDescription: "Room type deleted successfully",
    paramsSchema: RoomTypePathParamsSchema,
    includeNotFound: true,
  }),
};
